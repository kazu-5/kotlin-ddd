/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.sys.tables;


import com.example.demo.infrastructure.jooq.generated.sys.Sys;
import com.example.demo.infrastructure.jooq.generated.sys.tables.records.X$schemaFlattenedKeysRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$SCHEMA_FLATTENED_KEYS_TABLE extends TableImpl<X$schemaFlattenedKeysRecord> {

    private static final long serialVersionUID = -1280723380;

    /**
     * The reference instance of <code>sys.x$schema_flattened_keys</code>
     */
    public static final X$SCHEMA_FLATTENED_KEYS_TABLE X$SCHEMA_FLATTENED_KEYS = new X$SCHEMA_FLATTENED_KEYS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<X$schemaFlattenedKeysRecord> getRecordType() {
        return X$schemaFlattenedKeysRecord.class;
    }

    /**
     * The column <code>sys.x$schema_flattened_keys.table_schema</code>.
     */
    public final TableField<X$schemaFlattenedKeysRecord, String> TABLE_SCHEMA = createField(DSL.name("table_schema"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys.x$schema_flattened_keys.table_name</code>.
     */
    public final TableField<X$schemaFlattenedKeysRecord, String> TABLE_NAME = createField(DSL.name("table_name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys.x$schema_flattened_keys.index_name</code>.
     */
    public final TableField<X$schemaFlattenedKeysRecord, String> INDEX_NAME = createField(DSL.name("index_name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys.x$schema_flattened_keys.non_unique</code>.
     */
    public final TableField<X$schemaFlattenedKeysRecord, Long> NON_UNIQUE = createField(DSL.name("non_unique"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>sys.x$schema_flattened_keys.subpart_exists</code>.
     */
    public final TableField<X$schemaFlattenedKeysRecord, Long> SUBPART_EXISTS = createField(DSL.name("subpart_exists"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>sys.x$schema_flattened_keys.index_columns</code>.
     */
    public final TableField<X$schemaFlattenedKeysRecord, String> INDEX_COLUMNS = createField(DSL.name("index_columns"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>sys.x$schema_flattened_keys</code> table reference
     */
    public X$SCHEMA_FLATTENED_KEYS_TABLE() {
        this(DSL.name("x$schema_flattened_keys"), null);
    }

    /**
     * Create an aliased <code>sys.x$schema_flattened_keys</code> table reference
     */
    public X$SCHEMA_FLATTENED_KEYS_TABLE(String alias) {
        this(DSL.name(alias), X$SCHEMA_FLATTENED_KEYS);
    }

    /**
     * Create an aliased <code>sys.x$schema_flattened_keys</code> table reference
     */
    public X$SCHEMA_FLATTENED_KEYS_TABLE(Name alias) {
        this(alias, X$SCHEMA_FLATTENED_KEYS);
    }

    private X$SCHEMA_FLATTENED_KEYS_TABLE(Name alias, Table<X$schemaFlattenedKeysRecord> aliased) {
        this(alias, aliased, null);
    }

    private X$SCHEMA_FLATTENED_KEYS_TABLE(Name alias, Table<X$schemaFlattenedKeysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> X$SCHEMA_FLATTENED_KEYS_TABLE(Table<O> child, ForeignKey<O, X$schemaFlattenedKeysRecord> key) {
        super(child, key, X$SCHEMA_FLATTENED_KEYS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public X$SCHEMA_FLATTENED_KEYS_TABLE as(String alias) {
        return new X$SCHEMA_FLATTENED_KEYS_TABLE(DSL.name(alias), this);
    }

    @Override
    public X$SCHEMA_FLATTENED_KEYS_TABLE as(Name alias) {
        return new X$SCHEMA_FLATTENED_KEYS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$SCHEMA_FLATTENED_KEYS_TABLE rename(String name) {
        return new X$SCHEMA_FLATTENED_KEYS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$SCHEMA_FLATTENED_KEYS_TABLE rename(Name name) {
        return new X$SCHEMA_FLATTENED_KEYS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, Long, Long, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
