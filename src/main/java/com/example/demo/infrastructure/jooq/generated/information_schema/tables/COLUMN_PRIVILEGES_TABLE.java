/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.information_schema.tables;


import com.example.demo.infrastructure.jooq.generated.information_schema.InformationSchema;
import com.example.demo.infrastructure.jooq.generated.information_schema.tables.records.ColumnPrivilegesRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class COLUMN_PRIVILEGES_TABLE extends TableImpl<ColumnPrivilegesRecord> {

    private static final long serialVersionUID = 1393198397;

    /**
     * The reference instance of <code>information_schema.COLUMN_PRIVILEGES</code>
     */
    public static final COLUMN_PRIVILEGES_TABLE COLUMN_PRIVILEGES = new COLUMN_PRIVILEGES_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnPrivilegesRecord> getRecordType() {
        return ColumnPrivilegesRecord.class;
    }

    /**
     * The column <code>information_schema.COLUMN_PRIVILEGES.GRANTEE</code>.
     */
    public final TableField<ColumnPrivilegesRecord, String> GRANTEE = createField(DSL.name("GRANTEE"), org.jooq.impl.SQLDataType.VARCHAR(81).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.COLUMN_PRIVILEGES.TABLE_CATALOG</code>.
     */
    public final TableField<ColumnPrivilegesRecord, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.COLUMN_PRIVILEGES.TABLE_SCHEMA</code>.
     */
    public final TableField<ColumnPrivilegesRecord, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.COLUMN_PRIVILEGES.TABLE_NAME</code>.
     */
    public final TableField<ColumnPrivilegesRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.COLUMN_PRIVILEGES.COLUMN_NAME</code>.
     */
    public final TableField<ColumnPrivilegesRecord, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.COLUMN_PRIVILEGES.PRIVILEGE_TYPE</code>.
     */
    public final TableField<ColumnPrivilegesRecord, String> PRIVILEGE_TYPE = createField(DSL.name("PRIVILEGE_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.COLUMN_PRIVILEGES.IS_GRANTABLE</code>.
     */
    public final TableField<ColumnPrivilegesRecord, String> IS_GRANTABLE = createField(DSL.name("IS_GRANTABLE"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>information_schema.COLUMN_PRIVILEGES</code> table reference
     */
    public COLUMN_PRIVILEGES_TABLE() {
        this(DSL.name("COLUMN_PRIVILEGES"), null);
    }

    /**
     * Create an aliased <code>information_schema.COLUMN_PRIVILEGES</code> table reference
     */
    public COLUMN_PRIVILEGES_TABLE(String alias) {
        this(DSL.name(alias), COLUMN_PRIVILEGES);
    }

    /**
     * Create an aliased <code>information_schema.COLUMN_PRIVILEGES</code> table reference
     */
    public COLUMN_PRIVILEGES_TABLE(Name alias) {
        this(alias, COLUMN_PRIVILEGES);
    }

    private COLUMN_PRIVILEGES_TABLE(Name alias, Table<ColumnPrivilegesRecord> aliased) {
        this(alias, aliased, null);
    }

    private COLUMN_PRIVILEGES_TABLE(Name alias, Table<ColumnPrivilegesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> COLUMN_PRIVILEGES_TABLE(Table<O> child, ForeignKey<O, ColumnPrivilegesRecord> key) {
        super(child, key, COLUMN_PRIVILEGES);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public COLUMN_PRIVILEGES_TABLE as(String alias) {
        return new COLUMN_PRIVILEGES_TABLE(DSL.name(alias), this);
    }

    @Override
    public COLUMN_PRIVILEGES_TABLE as(Name alias) {
        return new COLUMN_PRIVILEGES_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public COLUMN_PRIVILEGES_TABLE rename(String name) {
        return new COLUMN_PRIVILEGES_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public COLUMN_PRIVILEGES_TABLE rename(Name name) {
        return new COLUMN_PRIVILEGES_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
