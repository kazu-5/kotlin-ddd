/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.sys.tables;


import com.example.demo.infrastructure.jooq.generated.sys.Sys;
import com.example.demo.infrastructure.jooq.generated.sys.tables.records.StatementsWithErrorsOrWarningsRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE extends TableImpl<StatementsWithErrorsOrWarningsRecord> {

    private static final long serialVersionUID = 8186023;

    /**
     * The reference instance of <code>sys.statements_with_errors_or_warnings</code>
     */
    public static final STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE STATEMENTS_WITH_ERRORS_OR_WARNINGS = new STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementsWithErrorsOrWarningsRecord> getRecordType() {
        return StatementsWithErrorsOrWarningsRecord.class;
    }

    /**
     * The column <code>sys.statements_with_errors_or_warnings.query</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, String> QUERY = createField(DSL.name("query"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.db</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, String> DB = createField(DSL.name("db"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.exec_count</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, ULong> EXEC_COUNT = createField(DSL.name("exec_count"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.errors</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, ULong> ERRORS = createField(DSL.name("errors"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.error_pct</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, BigDecimal> ERROR_PCT = createField(DSL.name("error_pct"), org.jooq.impl.SQLDataType.DECIMAL(27, 4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.warnings</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, ULong> WARNINGS = createField(DSL.name("warnings"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.warning_pct</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, BigDecimal> WARNING_PCT = createField(DSL.name("warning_pct"), org.jooq.impl.SQLDataType.DECIMAL(27, 4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.first_seen</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, Timestamp> FIRST_SEEN = createField(DSL.name("first_seen"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.last_seen</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, Timestamp> LAST_SEEN = createField(DSL.name("last_seen"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sys.statements_with_errors_or_warnings.digest</code>.
     */
    public final TableField<StatementsWithErrorsOrWarningsRecord, String> DIGEST = createField(DSL.name("digest"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * Create a <code>sys.statements_with_errors_or_warnings</code> table reference
     */
    public STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE() {
        this(DSL.name("statements_with_errors_or_warnings"), null);
    }

    /**
     * Create an aliased <code>sys.statements_with_errors_or_warnings</code> table reference
     */
    public STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(String alias) {
        this(DSL.name(alias), STATEMENTS_WITH_ERRORS_OR_WARNINGS);
    }

    /**
     * Create an aliased <code>sys.statements_with_errors_or_warnings</code> table reference
     */
    public STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(Name alias) {
        this(alias, STATEMENTS_WITH_ERRORS_OR_WARNINGS);
    }

    private STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(Name alias, Table<StatementsWithErrorsOrWarningsRecord> aliased) {
        this(alias, aliased, null);
    }

    private STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(Name alias, Table<StatementsWithErrorsOrWarningsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(Table<O> child, ForeignKey<O, StatementsWithErrorsOrWarningsRecord> key) {
        super(child, key, STATEMENTS_WITH_ERRORS_OR_WARNINGS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE as(String alias) {
        return new STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(DSL.name(alias), this);
    }

    @Override
    public STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE as(Name alias) {
        return new STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE rename(String name) {
        return new STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE rename(Name name) {
        return new STATEMENTS_WITH_ERRORS_OR_WARNINGS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, ULong, ULong, BigDecimal, ULong, BigDecimal, Timestamp, Timestamp, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
