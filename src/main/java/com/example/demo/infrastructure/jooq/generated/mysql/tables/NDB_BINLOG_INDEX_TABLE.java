/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.mysql.tables;


import com.example.demo.infrastructure.jooq.generated.mysql.Indexes;
import com.example.demo.infrastructure.jooq.generated.mysql.Keys;
import com.example.demo.infrastructure.jooq.generated.mysql.Mysql;
import com.example.demo.infrastructure.jooq.generated.mysql.tables.records.NdbBinlogIndexRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NDB_BINLOG_INDEX_TABLE extends TableImpl<NdbBinlogIndexRecord> {

    private static final long serialVersionUID = 273468938;

    /**
     * The reference instance of <code>mysql.ndb_binlog_index</code>
     */
    public static final NDB_BINLOG_INDEX_TABLE NDB_BINLOG_INDEX = new NDB_BINLOG_INDEX_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NdbBinlogIndexRecord> getRecordType() {
        return NdbBinlogIndexRecord.class;
    }

    /**
     * The column <code>mysql.ndb_binlog_index.Position</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> POSITION = createField(DSL.name("Position"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.File</code>.
     */
    public final TableField<NdbBinlogIndexRecord, String> FILE = createField(DSL.name("File"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.epoch</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> EPOCH = createField(DSL.name("epoch"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.inserts</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> INSERTS = createField(DSL.name("inserts"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.updates</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> UPDATES = createField(DSL.name("updates"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.deletes</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> DELETES = createField(DSL.name("deletes"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.schemaops</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> SCHEMAOPS = createField(DSL.name("schemaops"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.orig_server_id</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> ORIG_SERVER_ID = createField(DSL.name("orig_server_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.orig_epoch</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> ORIG_EPOCH = createField(DSL.name("orig_epoch"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.gci</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> GCI = createField(DSL.name("gci"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.next_position</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> NEXT_POSITION = createField(DSL.name("next_position"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.next_file</code>.
     */
    public final TableField<NdbBinlogIndexRecord, String> NEXT_FILE = createField(DSL.name("next_file"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>mysql.ndb_binlog_index</code> table reference
     */
    public NDB_BINLOG_INDEX_TABLE() {
        this(DSL.name("ndb_binlog_index"), null);
    }

    /**
     * Create an aliased <code>mysql.ndb_binlog_index</code> table reference
     */
    public NDB_BINLOG_INDEX_TABLE(String alias) {
        this(DSL.name(alias), NDB_BINLOG_INDEX);
    }

    /**
     * Create an aliased <code>mysql.ndb_binlog_index</code> table reference
     */
    public NDB_BINLOG_INDEX_TABLE(Name alias) {
        this(alias, NDB_BINLOG_INDEX);
    }

    private NDB_BINLOG_INDEX_TABLE(Name alias, Table<NdbBinlogIndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private NDB_BINLOG_INDEX_TABLE(Name alias, Table<NdbBinlogIndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NDB_BINLOG_INDEX_TABLE(Table<O> child, ForeignKey<O, NdbBinlogIndexRecord> key) {
        super(child, key, NDB_BINLOG_INDEX);
    }

    @Override
    public Schema getSchema() {
        return Mysql.MYSQL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NDB_BINLOG_INDEX_PRIMARY);
    }

    @Override
    public UniqueKey<NdbBinlogIndexRecord> getPrimaryKey() {
        return Keys.KEY_NDB_BINLOG_INDEX_PRIMARY;
    }

    @Override
    public List<UniqueKey<NdbBinlogIndexRecord>> getKeys() {
        return Arrays.<UniqueKey<NdbBinlogIndexRecord>>asList(Keys.KEY_NDB_BINLOG_INDEX_PRIMARY);
    }

    @Override
    public NDB_BINLOG_INDEX_TABLE as(String alias) {
        return new NDB_BINLOG_INDEX_TABLE(DSL.name(alias), this);
    }

    @Override
    public NDB_BINLOG_INDEX_TABLE as(Name alias) {
        return new NDB_BINLOG_INDEX_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NDB_BINLOG_INDEX_TABLE rename(String name) {
        return new NDB_BINLOG_INDEX_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NDB_BINLOG_INDEX_TABLE rename(Name name) {
        return new NDB_BINLOG_INDEX_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<ULong, String, ULong, UInteger, UInteger, UInteger, UInteger, UInteger, ULong, UInteger, ULong, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
