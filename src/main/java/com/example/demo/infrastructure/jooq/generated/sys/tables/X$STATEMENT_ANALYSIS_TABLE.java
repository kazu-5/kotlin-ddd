/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.sys.tables;


import com.example.demo.infrastructure.jooq.generated.sys.Sys;
import com.example.demo.infrastructure.jooq.generated.sys.tables.records.X$statementAnalysisRecord;

import java.math.BigInteger;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$STATEMENT_ANALYSIS_TABLE extends TableImpl<X$statementAnalysisRecord> {

    private static final long serialVersionUID = 249042107;

    /**
     * The reference instance of <code>sys.x$statement_analysis</code>
     */
    public static final X$STATEMENT_ANALYSIS_TABLE X$STATEMENT_ANALYSIS = new X$STATEMENT_ANALYSIS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<X$statementAnalysisRecord> getRecordType() {
        return X$statementAnalysisRecord.class;
    }

    /**
     * The column <code>sys.x$statement_analysis.query</code>.
     */
    public final TableField<X$statementAnalysisRecord, String> QUERY = createField(DSL.name("query"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.x$statement_analysis.db</code>.
     */
    public final TableField<X$statementAnalysisRecord, String> DB = createField(DSL.name("db"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$statement_analysis.full_scan</code>.
     */
    public final TableField<X$statementAnalysisRecord, String> FULL_SCAN = createField(DSL.name("full_scan"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sys.x$statement_analysis.exec_count</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> EXEC_COUNT = createField(DSL.name("exec_count"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.err_count</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> ERR_COUNT = createField(DSL.name("err_count"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.warn_count</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> WARN_COUNT = createField(DSL.name("warn_count"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.total_latency</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> TOTAL_LATENCY = createField(DSL.name("total_latency"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.max_latency</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> MAX_LATENCY = createField(DSL.name("max_latency"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.avg_latency</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> AVG_LATENCY = createField(DSL.name("avg_latency"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.lock_latency</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> LOCK_LATENCY = createField(DSL.name("lock_latency"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.rows_sent</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> ROWS_SENT = createField(DSL.name("rows_sent"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.rows_sent_avg</code>.
     */
    public final TableField<X$statementAnalysisRecord, BigInteger> ROWS_SENT_AVG = createField(DSL.name("rows_sent_avg"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.x$statement_analysis.rows_examined</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> ROWS_EXAMINED = createField(DSL.name("rows_examined"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.rows_examined_avg</code>.
     */
    public final TableField<X$statementAnalysisRecord, BigInteger> ROWS_EXAMINED_AVG = createField(DSL.name("rows_examined_avg"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.x$statement_analysis.rows_affected</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> ROWS_AFFECTED = createField(DSL.name("rows_affected"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.rows_affected_avg</code>.
     */
    public final TableField<X$statementAnalysisRecord, BigInteger> ROWS_AFFECTED_AVG = createField(DSL.name("rows_affected_avg"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.x$statement_analysis.tmp_tables</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> TMP_TABLES = createField(DSL.name("tmp_tables"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.tmp_disk_tables</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> TMP_DISK_TABLES = createField(DSL.name("tmp_disk_tables"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.rows_sorted</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> ROWS_SORTED = createField(DSL.name("rows_sorted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.sort_merge_passes</code>.
     */
    public final TableField<X$statementAnalysisRecord, ULong> SORT_MERGE_PASSES = createField(DSL.name("sort_merge_passes"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statement_analysis.digest</code>.
     */
    public final TableField<X$statementAnalysisRecord, String> DIGEST = createField(DSL.name("digest"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>sys.x$statement_analysis.first_seen</code>.
     */
    public final TableField<X$statementAnalysisRecord, Timestamp> FIRST_SEEN = createField(DSL.name("first_seen"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sys.x$statement_analysis.last_seen</code>.
     */
    public final TableField<X$statementAnalysisRecord, Timestamp> LAST_SEEN = createField(DSL.name("last_seen"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>sys.x$statement_analysis</code> table reference
     */
    public X$STATEMENT_ANALYSIS_TABLE() {
        this(DSL.name("x$statement_analysis"), null);
    }

    /**
     * Create an aliased <code>sys.x$statement_analysis</code> table reference
     */
    public X$STATEMENT_ANALYSIS_TABLE(String alias) {
        this(DSL.name(alias), X$STATEMENT_ANALYSIS);
    }

    /**
     * Create an aliased <code>sys.x$statement_analysis</code> table reference
     */
    public X$STATEMENT_ANALYSIS_TABLE(Name alias) {
        this(alias, X$STATEMENT_ANALYSIS);
    }

    private X$STATEMENT_ANALYSIS_TABLE(Name alias, Table<X$statementAnalysisRecord> aliased) {
        this(alias, aliased, null);
    }

    private X$STATEMENT_ANALYSIS_TABLE(Name alias, Table<X$statementAnalysisRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> X$STATEMENT_ANALYSIS_TABLE(Table<O> child, ForeignKey<O, X$statementAnalysisRecord> key) {
        super(child, key, X$STATEMENT_ANALYSIS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public X$STATEMENT_ANALYSIS_TABLE as(String alias) {
        return new X$STATEMENT_ANALYSIS_TABLE(DSL.name(alias), this);
    }

    @Override
    public X$STATEMENT_ANALYSIS_TABLE as(Name alias) {
        return new X$STATEMENT_ANALYSIS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$STATEMENT_ANALYSIS_TABLE rename(String name) {
        return new X$STATEMENT_ANALYSIS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$STATEMENT_ANALYSIS_TABLE rename(Name name) {
        return new X$STATEMENT_ANALYSIS_TABLE(name, null);
    }
}
