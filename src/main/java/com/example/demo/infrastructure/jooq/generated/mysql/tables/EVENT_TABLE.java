/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.mysql.tables;


import com.example.demo.infrastructure.jooq.generated.mysql.Indexes;
import com.example.demo.infrastructure.jooq.generated.mysql.Keys;
import com.example.demo.infrastructure.jooq.generated.mysql.Mysql;
import com.example.demo.infrastructure.jooq.generated.mysql.enums.EventIntervalField;
import com.example.demo.infrastructure.jooq.generated.mysql.enums.EventOnCompletion;
import com.example.demo.infrastructure.jooq.generated.mysql.enums.EventStatus;
import com.example.demo.infrastructure.jooq.generated.mysql.tables.records.EventRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * Events
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EVENT_TABLE extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 1236188517;

    /**
     * The reference instance of <code>mysql.event</code>
     */
    public static final EVENT_TABLE EVENT = new EVENT_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>mysql.event.db</code>.
     */
    public final TableField<EventRecord, String> DB = createField(DSL.name("db"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.event.name</code>.
     */
    public final TableField<EventRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.event.body</code>.
     */
    public final TableField<EventRecord, byte[]> BODY = createField(DSL.name("body"), org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.event.definer</code>.
     */
    public final TableField<EventRecord, String> DEFINER = createField(DSL.name("definer"), org.jooq.impl.SQLDataType.CHAR(93).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.event.execute_at</code>.
     */
    public final TableField<EventRecord, Timestamp> EXECUTE_AT = createField(DSL.name("execute_at"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mysql.event.interval_value</code>.
     */
    public final TableField<EventRecord, Integer> INTERVAL_VALUE = createField(DSL.name("interval_value"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mysql.event.interval_field</code>.
     */
    public final TableField<EventRecord, EventIntervalField> INTERVAL_FIELD = createField(DSL.name("interval_field"), org.jooq.impl.SQLDataType.VARCHAR(18).asEnumDataType(com.example.demo.infrastructure.jooq.generated.mysql.enums.EventIntervalField.class), this, "");

    /**
     * The column <code>mysql.event.created</code>.
     */
    public final TableField<EventRecord, Timestamp> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mysql.event.modified</code>.
     */
    public final TableField<EventRecord, Timestamp> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mysql.event.last_executed</code>.
     */
    public final TableField<EventRecord, Timestamp> LAST_EXECUTED = createField(DSL.name("last_executed"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mysql.event.starts</code>.
     */
    public final TableField<EventRecord, Timestamp> STARTS = createField(DSL.name("starts"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mysql.event.ends</code>.
     */
    public final TableField<EventRecord, Timestamp> ENDS = createField(DSL.name("ends"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>mysql.event.status</code>.
     */
    public final TableField<EventRecord, EventStatus> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(18).nullable(false).defaultValue(org.jooq.impl.DSL.inline("ENABLED", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.example.demo.infrastructure.jooq.generated.mysql.enums.EventStatus.class), this, "");

    /**
     * The column <code>mysql.event.on_completion</code>.
     */
    public final TableField<EventRecord, EventOnCompletion> ON_COMPLETION = createField(DSL.name("on_completion"), org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false).defaultValue(org.jooq.impl.DSL.inline("DROP", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.example.demo.infrastructure.jooq.generated.mysql.enums.EventOnCompletion.class), this, "");

    /**
     * The column <code>mysql.event.sql_mode</code>.
     */
    public final TableField<EventRecord, String> SQL_MODE = createField(DSL.name("sql_mode"), org.jooq.impl.SQLDataType.VARCHAR(478).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mysql.event.comment</code>.
     */
    public final TableField<EventRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.event.originator</code>.
     */
    public final TableField<EventRecord, UInteger> ORIGINATOR = createField(DSL.name("originator"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.event.time_zone</code>.
     */
    public final TableField<EventRecord, String> TIME_ZONE = createField(DSL.name("time_zone"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("SYSTEM", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.event.character_set_client</code>.
     */
    public final TableField<EventRecord, String> CHARACTER_SET_CLIENT = createField(DSL.name("character_set_client"), org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>mysql.event.collation_connection</code>.
     */
    public final TableField<EventRecord, String> COLLATION_CONNECTION = createField(DSL.name("collation_connection"), org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>mysql.event.db_collation</code>.
     */
    public final TableField<EventRecord, String> DB_COLLATION = createField(DSL.name("db_collation"), org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>mysql.event.body_utf8</code>.
     */
    public final TableField<EventRecord, byte[]> BODY_UTF8 = createField(DSL.name("body_utf8"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>mysql.event</code> table reference
     */
    public EVENT_TABLE() {
        this(DSL.name("event"), null);
    }

    /**
     * Create an aliased <code>mysql.event</code> table reference
     */
    public EVENT_TABLE(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>mysql.event</code> table reference
     */
    public EVENT_TABLE(Name alias) {
        this(alias, EVENT);
    }

    private EVENT_TABLE(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, null);
    }

    private EVENT_TABLE(Name alias, Table<EventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Events"));
    }

    public <O extends Record> EVENT_TABLE(Table<O> child, ForeignKey<O, EventRecord> key) {
        super(child, key, EVENT);
    }

    @Override
    public Schema getSchema() {
        return Mysql.MYSQL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_PRIMARY);
    }

    @Override
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventRecord>> getKeys() {
        return Arrays.<UniqueKey<EventRecord>>asList(Keys.KEY_EVENT_PRIMARY);
    }

    @Override
    public EVENT_TABLE as(String alias) {
        return new EVENT_TABLE(DSL.name(alias), this);
    }

    @Override
    public EVENT_TABLE as(Name alias) {
        return new EVENT_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EVENT_TABLE rename(String name) {
        return new EVENT_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EVENT_TABLE rename(Name name) {
        return new EVENT_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, byte[], String, Timestamp, Integer, EventIntervalField, Timestamp, Timestamp, Timestamp, Timestamp, Timestamp, EventStatus, EventOnCompletion, String, String, UInteger, String, String, String, String, byte[]> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
