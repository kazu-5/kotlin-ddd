/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.sys.tables;


import com.example.demo.infrastructure.jooq.generated.sys.Sys;
import com.example.demo.infrastructure.jooq.generated.sys.tables.records.X$schemaTablesWithFullTableScansRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE extends TableImpl<X$schemaTablesWithFullTableScansRecord> {

    private static final long serialVersionUID = -1744204781;

    /**
     * The reference instance of <code>sys.x$schema_tables_with_full_table_scans</code>
     */
    public static final X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS = new X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<X$schemaTablesWithFullTableScansRecord> getRecordType() {
        return X$schemaTablesWithFullTableScansRecord.class;
    }

    /**
     * The column <code>sys.x$schema_tables_with_full_table_scans.object_schema</code>.
     */
    public final TableField<X$schemaTablesWithFullTableScansRecord, String> OBJECT_SCHEMA = createField(DSL.name("object_schema"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$schema_tables_with_full_table_scans.object_name</code>.
     */
    public final TableField<X$schemaTablesWithFullTableScansRecord, String> OBJECT_NAME = createField(DSL.name("object_name"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$schema_tables_with_full_table_scans.rows_full_scanned</code>.
     */
    public final TableField<X$schemaTablesWithFullTableScansRecord, ULong> ROWS_FULL_SCANNED = createField(DSL.name("rows_full_scanned"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_tables_with_full_table_scans.latency</code>.
     */
    public final TableField<X$schemaTablesWithFullTableScansRecord, ULong> LATENCY = createField(DSL.name("latency"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>sys.x$schema_tables_with_full_table_scans</code> table reference
     */
    public X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE() {
        this(DSL.name("x$schema_tables_with_full_table_scans"), null);
    }

    /**
     * Create an aliased <code>sys.x$schema_tables_with_full_table_scans</code> table reference
     */
    public X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(String alias) {
        this(DSL.name(alias), X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS);
    }

    /**
     * Create an aliased <code>sys.x$schema_tables_with_full_table_scans</code> table reference
     */
    public X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(Name alias) {
        this(alias, X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS);
    }

    private X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(Name alias, Table<X$schemaTablesWithFullTableScansRecord> aliased) {
        this(alias, aliased, null);
    }

    private X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(Name alias, Table<X$schemaTablesWithFullTableScansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(Table<O> child, ForeignKey<O, X$schemaTablesWithFullTableScansRecord> key) {
        super(child, key, X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE as(String alias) {
        return new X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(DSL.name(alias), this);
    }

    @Override
    public X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE as(Name alias) {
        return new X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE rename(String name) {
        return new X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE rename(Name name) {
        return new X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, ULong, ULong> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
