/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.mysql.tables;


import com.example.demo.infrastructure.jooq.generated.mysql.Mysql;
import com.example.demo.infrastructure.jooq.generated.mysql.tables.records.SlowLogRecord;

import java.sql.Time;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Slow log
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SLOW_LOG_TABLE extends TableImpl<SlowLogRecord> {

    private static final long serialVersionUID = -419449109;

    /**
     * The reference instance of <code>mysql.slow_log</code>
     */
    public static final SLOW_LOG_TABLE SLOW_LOG = new SLOW_LOG_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlowLogRecord> getRecordType() {
        return SlowLogRecord.class;
    }

    /**
     * The column <code>mysql.slow_log.start_time</code>.
     */
    public final TableField<SlowLogRecord, Timestamp> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(6)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mysql.slow_log.user_host</code>.
     */
    public final TableField<SlowLogRecord, String> USER_HOST = createField(DSL.name("user_host"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.query_time</code>.
     */
    public final TableField<SlowLogRecord, Time> QUERY_TIME = createField(DSL.name("query_time"), org.jooq.impl.SQLDataType.TIME.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.lock_time</code>.
     */
    public final TableField<SlowLogRecord, Time> LOCK_TIME = createField(DSL.name("lock_time"), org.jooq.impl.SQLDataType.TIME.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.rows_sent</code>.
     */
    public final TableField<SlowLogRecord, Integer> ROWS_SENT = createField(DSL.name("rows_sent"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.rows_examined</code>.
     */
    public final TableField<SlowLogRecord, Integer> ROWS_EXAMINED = createField(DSL.name("rows_examined"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.db</code>.
     */
    public final TableField<SlowLogRecord, String> DB = createField(DSL.name("db"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.last_insert_id</code>.
     */
    public final TableField<SlowLogRecord, Integer> LAST_INSERT_ID = createField(DSL.name("last_insert_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.insert_id</code>.
     */
    public final TableField<SlowLogRecord, Integer> INSERT_ID = createField(DSL.name("insert_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.server_id</code>.
     */
    public final TableField<SlowLogRecord, UInteger> SERVER_ID = createField(DSL.name("server_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.sql_text</code>.
     */
    public final TableField<SlowLogRecord, byte[]> SQL_TEXT = createField(DSL.name("sql_text"), org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.thread_id</code>.
     */
    public final TableField<SlowLogRecord, ULong> THREAD_ID = createField(DSL.name("thread_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>mysql.slow_log</code> table reference
     */
    public SLOW_LOG_TABLE() {
        this(DSL.name("slow_log"), null);
    }

    /**
     * Create an aliased <code>mysql.slow_log</code> table reference
     */
    public SLOW_LOG_TABLE(String alias) {
        this(DSL.name(alias), SLOW_LOG);
    }

    /**
     * Create an aliased <code>mysql.slow_log</code> table reference
     */
    public SLOW_LOG_TABLE(Name alias) {
        this(alias, SLOW_LOG);
    }

    private SLOW_LOG_TABLE(Name alias, Table<SlowLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SLOW_LOG_TABLE(Name alias, Table<SlowLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Slow log"));
    }

    public <O extends Record> SLOW_LOG_TABLE(Table<O> child, ForeignKey<O, SlowLogRecord> key) {
        super(child, key, SLOW_LOG);
    }

    @Override
    public Schema getSchema() {
        return Mysql.MYSQL;
    }

    @Override
    public SLOW_LOG_TABLE as(String alias) {
        return new SLOW_LOG_TABLE(DSL.name(alias), this);
    }

    @Override
    public SLOW_LOG_TABLE as(Name alias) {
        return new SLOW_LOG_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SLOW_LOG_TABLE rename(String name) {
        return new SLOW_LOG_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SLOW_LOG_TABLE rename(Name name) {
        return new SLOW_LOG_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Timestamp, String, Time, Time, Integer, Integer, String, Integer, Integer, UInteger, byte[], ULong> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
