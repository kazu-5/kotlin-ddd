/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.performance_schema.tables;


import com.example.demo.infrastructure.jooq.generated.performance_schema.PerformanceSchema;
import com.example.demo.infrastructure.jooq.generated.performance_schema.tables.records.TableHandlesRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TABLE_HANDLES_TABLE extends TableImpl<TableHandlesRecord> {

    private static final long serialVersionUID = 581689859;

    /**
     * The reference instance of <code>performance_schema.table_handles</code>
     */
    public static final TABLE_HANDLES_TABLE TABLE_HANDLES = new TABLE_HANDLES_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableHandlesRecord> getRecordType() {
        return TableHandlesRecord.class;
    }

    /**
     * The column <code>performance_schema.table_handles.OBJECT_TYPE</code>.
     */
    public final TableField<TableHandlesRecord, String> OBJECT_TYPE = createField(DSL.name("OBJECT_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.table_handles.OBJECT_SCHEMA</code>.
     */
    public final TableField<TableHandlesRecord, String> OBJECT_SCHEMA = createField(DSL.name("OBJECT_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.table_handles.OBJECT_NAME</code>.
     */
    public final TableField<TableHandlesRecord, String> OBJECT_NAME = createField(DSL.name("OBJECT_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.table_handles.OBJECT_INSTANCE_BEGIN</code>.
     */
    public final TableField<TableHandlesRecord, ULong> OBJECT_INSTANCE_BEGIN = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.table_handles.OWNER_THREAD_ID</code>.
     */
    public final TableField<TableHandlesRecord, ULong> OWNER_THREAD_ID = createField(DSL.name("OWNER_THREAD_ID"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.table_handles.OWNER_EVENT_ID</code>.
     */
    public final TableField<TableHandlesRecord, ULong> OWNER_EVENT_ID = createField(DSL.name("OWNER_EVENT_ID"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.table_handles.INTERNAL_LOCK</code>.
     */
    public final TableField<TableHandlesRecord, String> INTERNAL_LOCK = createField(DSL.name("INTERNAL_LOCK"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.table_handles.EXTERNAL_LOCK</code>.
     */
    public final TableField<TableHandlesRecord, String> EXTERNAL_LOCK = createField(DSL.name("EXTERNAL_LOCK"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>performance_schema.table_handles</code> table reference
     */
    public TABLE_HANDLES_TABLE() {
        this(DSL.name("table_handles"), null);
    }

    /**
     * Create an aliased <code>performance_schema.table_handles</code> table reference
     */
    public TABLE_HANDLES_TABLE(String alias) {
        this(DSL.name(alias), TABLE_HANDLES);
    }

    /**
     * Create an aliased <code>performance_schema.table_handles</code> table reference
     */
    public TABLE_HANDLES_TABLE(Name alias) {
        this(alias, TABLE_HANDLES);
    }

    private TABLE_HANDLES_TABLE(Name alias, Table<TableHandlesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TABLE_HANDLES_TABLE(Name alias, Table<TableHandlesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TABLE_HANDLES_TABLE(Table<O> child, ForeignKey<O, TableHandlesRecord> key) {
        super(child, key, TABLE_HANDLES);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public TABLE_HANDLES_TABLE as(String alias) {
        return new TABLE_HANDLES_TABLE(DSL.name(alias), this);
    }

    @Override
    public TABLE_HANDLES_TABLE as(Name alias) {
        return new TABLE_HANDLES_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TABLE_HANDLES_TABLE rename(String name) {
        return new TABLE_HANDLES_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TABLE_HANDLES_TABLE rename(Name name) {
        return new TABLE_HANDLES_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, ULong, ULong, ULong, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
