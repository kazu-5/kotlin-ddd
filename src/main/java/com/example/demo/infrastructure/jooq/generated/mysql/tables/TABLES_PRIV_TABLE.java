/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.mysql.tables;


import com.example.demo.infrastructure.jooq.generated.mysql.Indexes;
import com.example.demo.infrastructure.jooq.generated.mysql.Keys;
import com.example.demo.infrastructure.jooq.generated.mysql.Mysql;
import com.example.demo.infrastructure.jooq.generated.mysql.tables.records.TablesPrivRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Table privileges
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TABLES_PRIV_TABLE extends TableImpl<TablesPrivRecord> {

    private static final long serialVersionUID = -1491773573;

    /**
     * The reference instance of <code>mysql.tables_priv</code>
     */
    public static final TABLES_PRIV_TABLE TABLES_PRIV = new TABLES_PRIV_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TablesPrivRecord> getRecordType() {
        return TablesPrivRecord.class;
    }

    /**
     * The column <code>mysql.tables_priv.Host</code>.
     */
    public final TableField<TablesPrivRecord, String> HOST = createField(DSL.name("Host"), org.jooq.impl.SQLDataType.CHAR(60).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Db</code>.
     */
    public final TableField<TablesPrivRecord, String> DB = createField(DSL.name("Db"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.User</code>.
     */
    public final TableField<TablesPrivRecord, String> USER = createField(DSL.name("User"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Table_name</code>.
     */
    public final TableField<TablesPrivRecord, String> TABLE_NAME = createField(DSL.name("Table_name"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Grantor</code>.
     */
    public final TableField<TablesPrivRecord, String> GRANTOR = createField(DSL.name("Grantor"), org.jooq.impl.SQLDataType.CHAR(93).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Timestamp</code>.
     */
    public final TableField<TablesPrivRecord, Timestamp> TIMESTAMP = createField(DSL.name("Timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mysql.tables_priv.Table_priv</code>.
     */
    public final TableField<TablesPrivRecord, String> TABLE_PRIV = createField(DSL.name("Table_priv"), org.jooq.impl.SQLDataType.VARCHAR(98).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Column_priv</code>.
     */
    public final TableField<TablesPrivRecord, String> COLUMN_PRIV = createField(DSL.name("Column_priv"), org.jooq.impl.SQLDataType.VARCHAR(31).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>mysql.tables_priv</code> table reference
     */
    public TABLES_PRIV_TABLE() {
        this(DSL.name("tables_priv"), null);
    }

    /**
     * Create an aliased <code>mysql.tables_priv</code> table reference
     */
    public TABLES_PRIV_TABLE(String alias) {
        this(DSL.name(alias), TABLES_PRIV);
    }

    /**
     * Create an aliased <code>mysql.tables_priv</code> table reference
     */
    public TABLES_PRIV_TABLE(Name alias) {
        this(alias, TABLES_PRIV);
    }

    private TABLES_PRIV_TABLE(Name alias, Table<TablesPrivRecord> aliased) {
        this(alias, aliased, null);
    }

    private TABLES_PRIV_TABLE(Name alias, Table<TablesPrivRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table privileges"));
    }

    public <O extends Record> TABLES_PRIV_TABLE(Table<O> child, ForeignKey<O, TablesPrivRecord> key) {
        super(child, key, TABLES_PRIV);
    }

    @Override
    public Schema getSchema() {
        return Mysql.MYSQL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TABLES_PRIV_GRANTOR, Indexes.TABLES_PRIV_PRIMARY);
    }

    @Override
    public UniqueKey<TablesPrivRecord> getPrimaryKey() {
        return Keys.KEY_TABLES_PRIV_PRIMARY;
    }

    @Override
    public List<UniqueKey<TablesPrivRecord>> getKeys() {
        return Arrays.<UniqueKey<TablesPrivRecord>>asList(Keys.KEY_TABLES_PRIV_PRIMARY);
    }

    @Override
    public TABLES_PRIV_TABLE as(String alias) {
        return new TABLES_PRIV_TABLE(DSL.name(alias), this);
    }

    @Override
    public TABLES_PRIV_TABLE as(Name alias) {
        return new TABLES_PRIV_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TABLES_PRIV_TABLE rename(String name) {
        return new TABLES_PRIV_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TABLES_PRIV_TABLE rename(Name name) {
        return new TABLES_PRIV_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, Timestamp, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
