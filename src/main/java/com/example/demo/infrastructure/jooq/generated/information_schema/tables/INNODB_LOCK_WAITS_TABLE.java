/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.information_schema.tables;


import com.example.demo.infrastructure.jooq.generated.information_schema.InformationSchema;
import com.example.demo.infrastructure.jooq.generated.information_schema.tables.records.InnodbLockWaitsRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class INNODB_LOCK_WAITS_TABLE extends TableImpl<InnodbLockWaitsRecord> {

    private static final long serialVersionUID = 1423415190;

    /**
     * The reference instance of <code>information_schema.INNODB_LOCK_WAITS</code>
     */
    public static final INNODB_LOCK_WAITS_TABLE INNODB_LOCK_WAITS = new INNODB_LOCK_WAITS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbLockWaitsRecord> getRecordType() {
        return InnodbLockWaitsRecord.class;
    }

    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.requesting_trx_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> REQUESTING_TRX_ID = createField(DSL.name("requesting_trx_id"), org.jooq.impl.SQLDataType.VARCHAR(18).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.requested_lock_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> REQUESTED_LOCK_ID = createField(DSL.name("requested_lock_id"), org.jooq.impl.SQLDataType.VARCHAR(81).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.blocking_trx_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> BLOCKING_TRX_ID = createField(DSL.name("blocking_trx_id"), org.jooq.impl.SQLDataType.VARCHAR(18).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_LOCK_WAITS.blocking_lock_id</code>.
     */
    public final TableField<InnodbLockWaitsRecord, String> BLOCKING_LOCK_ID = createField(DSL.name("blocking_lock_id"), org.jooq.impl.SQLDataType.VARCHAR(81).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>information_schema.INNODB_LOCK_WAITS</code> table reference
     */
    public INNODB_LOCK_WAITS_TABLE() {
        this(DSL.name("INNODB_LOCK_WAITS"), null);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_LOCK_WAITS</code> table reference
     */
    public INNODB_LOCK_WAITS_TABLE(String alias) {
        this(DSL.name(alias), INNODB_LOCK_WAITS);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_LOCK_WAITS</code> table reference
     */
    public INNODB_LOCK_WAITS_TABLE(Name alias) {
        this(alias, INNODB_LOCK_WAITS);
    }

    private INNODB_LOCK_WAITS_TABLE(Name alias, Table<InnodbLockWaitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private INNODB_LOCK_WAITS_TABLE(Name alias, Table<InnodbLockWaitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> INNODB_LOCK_WAITS_TABLE(Table<O> child, ForeignKey<O, InnodbLockWaitsRecord> key) {
        super(child, key, INNODB_LOCK_WAITS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public INNODB_LOCK_WAITS_TABLE as(String alias) {
        return new INNODB_LOCK_WAITS_TABLE(DSL.name(alias), this);
    }

    @Override
    public INNODB_LOCK_WAITS_TABLE as(Name alias) {
        return new INNODB_LOCK_WAITS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public INNODB_LOCK_WAITS_TABLE rename(String name) {
        return new INNODB_LOCK_WAITS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public INNODB_LOCK_WAITS_TABLE rename(Name name) {
        return new INNODB_LOCK_WAITS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
