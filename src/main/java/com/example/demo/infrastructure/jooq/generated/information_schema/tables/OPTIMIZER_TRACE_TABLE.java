/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.information_schema.tables;


import com.example.demo.infrastructure.jooq.generated.information_schema.InformationSchema;
import com.example.demo.infrastructure.jooq.generated.information_schema.tables.records.OptimizerTraceRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OPTIMIZER_TRACE_TABLE extends TableImpl<OptimizerTraceRecord> {

    private static final long serialVersionUID = -1766336674;

    /**
     * The reference instance of <code>information_schema.OPTIMIZER_TRACE</code>
     */
    public static final OPTIMIZER_TRACE_TABLE OPTIMIZER_TRACE = new OPTIMIZER_TRACE_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OptimizerTraceRecord> getRecordType() {
        return OptimizerTraceRecord.class;
    }

    /**
     * The column <code>information_schema.OPTIMIZER_TRACE.QUERY</code>.
     */
    public final TableField<OptimizerTraceRecord, String> QUERY = createField(DSL.name("QUERY"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>information_schema.OPTIMIZER_TRACE.TRACE</code>.
     */
    public final TableField<OptimizerTraceRecord, String> TRACE = createField(DSL.name("TRACE"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>information_schema.OPTIMIZER_TRACE.MISSING_BYTES_BEYOND_MAX_MEM_SIZE</code>.
     */
    public final TableField<OptimizerTraceRecord, Integer> MISSING_BYTES_BEYOND_MAX_MEM_SIZE = createField(DSL.name("MISSING_BYTES_BEYOND_MAX_MEM_SIZE"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.OPTIMIZER_TRACE.INSUFFICIENT_PRIVILEGES</code>.
     */
    public final TableField<OptimizerTraceRecord, Byte> INSUFFICIENT_PRIVILEGES = createField(DSL.name("INSUFFICIENT_PRIVILEGES"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>information_schema.OPTIMIZER_TRACE</code> table reference
     */
    public OPTIMIZER_TRACE_TABLE() {
        this(DSL.name("OPTIMIZER_TRACE"), null);
    }

    /**
     * Create an aliased <code>information_schema.OPTIMIZER_TRACE</code> table reference
     */
    public OPTIMIZER_TRACE_TABLE(String alias) {
        this(DSL.name(alias), OPTIMIZER_TRACE);
    }

    /**
     * Create an aliased <code>information_schema.OPTIMIZER_TRACE</code> table reference
     */
    public OPTIMIZER_TRACE_TABLE(Name alias) {
        this(alias, OPTIMIZER_TRACE);
    }

    private OPTIMIZER_TRACE_TABLE(Name alias, Table<OptimizerTraceRecord> aliased) {
        this(alias, aliased, null);
    }

    private OPTIMIZER_TRACE_TABLE(Name alias, Table<OptimizerTraceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OPTIMIZER_TRACE_TABLE(Table<O> child, ForeignKey<O, OptimizerTraceRecord> key) {
        super(child, key, OPTIMIZER_TRACE);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public OPTIMIZER_TRACE_TABLE as(String alias) {
        return new OPTIMIZER_TRACE_TABLE(DSL.name(alias), this);
    }

    @Override
    public OPTIMIZER_TRACE_TABLE as(Name alias) {
        return new OPTIMIZER_TRACE_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OPTIMIZER_TRACE_TABLE rename(String name) {
        return new OPTIMIZER_TRACE_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OPTIMIZER_TRACE_TABLE rename(Name name) {
        return new OPTIMIZER_TRACE_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
