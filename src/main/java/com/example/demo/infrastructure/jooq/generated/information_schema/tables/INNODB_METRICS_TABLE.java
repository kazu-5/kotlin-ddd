/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.information_schema.tables;


import com.example.demo.infrastructure.jooq.generated.information_schema.InformationSchema;
import com.example.demo.infrastructure.jooq.generated.information_schema.tables.records.InnodbMetricsRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class INNODB_METRICS_TABLE extends TableImpl<InnodbMetricsRecord> {

    private static final long serialVersionUID = -1024866548;

    /**
     * The reference instance of <code>information_schema.INNODB_METRICS</code>
     */
    public static final INNODB_METRICS_TABLE INNODB_METRICS = new INNODB_METRICS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbMetricsRecord> getRecordType() {
        return InnodbMetricsRecord.class;
    }

    /**
     * The column <code>information_schema.INNODB_METRICS.NAME</code>.
     */
    public final TableField<InnodbMetricsRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(193).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.SUBSYSTEM</code>.
     */
    public final TableField<InnodbMetricsRecord, String> SUBSYSTEM = createField(DSL.name("SUBSYSTEM"), org.jooq.impl.SQLDataType.VARCHAR(193).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.COUNT</code>.
     */
    public final TableField<InnodbMetricsRecord, Long> COUNT = createField(DSL.name("COUNT"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.MAX_COUNT</code>.
     */
    public final TableField<InnodbMetricsRecord, Long> MAX_COUNT = createField(DSL.name("MAX_COUNT"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.MIN_COUNT</code>.
     */
    public final TableField<InnodbMetricsRecord, Long> MIN_COUNT = createField(DSL.name("MIN_COUNT"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.AVG_COUNT</code>.
     */
    public final TableField<InnodbMetricsRecord, Double> AVG_COUNT = createField(DSL.name("AVG_COUNT"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.COUNT_RESET</code>.
     */
    public final TableField<InnodbMetricsRecord, Long> COUNT_RESET = createField(DSL.name("COUNT_RESET"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.MAX_COUNT_RESET</code>.
     */
    public final TableField<InnodbMetricsRecord, Long> MAX_COUNT_RESET = createField(DSL.name("MAX_COUNT_RESET"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.MIN_COUNT_RESET</code>.
     */
    public final TableField<InnodbMetricsRecord, Long> MIN_COUNT_RESET = createField(DSL.name("MIN_COUNT_RESET"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.AVG_COUNT_RESET</code>.
     */
    public final TableField<InnodbMetricsRecord, Double> AVG_COUNT_RESET = createField(DSL.name("AVG_COUNT_RESET"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_ENABLED</code>.
     */
    public final TableField<InnodbMetricsRecord, Timestamp> TIME_ENABLED = createField(DSL.name("TIME_ENABLED"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_DISABLED</code>.
     */
    public final TableField<InnodbMetricsRecord, Timestamp> TIME_DISABLED = createField(DSL.name("TIME_DISABLED"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_ELAPSED</code>.
     */
    public final TableField<InnodbMetricsRecord, Long> TIME_ELAPSED = createField(DSL.name("TIME_ELAPSED"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_RESET</code>.
     */
    public final TableField<InnodbMetricsRecord, Timestamp> TIME_RESET = createField(DSL.name("TIME_RESET"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.STATUS</code>.
     */
    public final TableField<InnodbMetricsRecord, String> STATUS = createField(DSL.name("STATUS"), org.jooq.impl.SQLDataType.VARCHAR(193).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.TYPE</code>.
     */
    public final TableField<InnodbMetricsRecord, String> TYPE = createField(DSL.name("TYPE"), org.jooq.impl.SQLDataType.VARCHAR(193).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_METRICS.COMMENT</code>.
     */
    public final TableField<InnodbMetricsRecord, String> COMMENT = createField(DSL.name("COMMENT"), org.jooq.impl.SQLDataType.VARCHAR(193).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>information_schema.INNODB_METRICS</code> table reference
     */
    public INNODB_METRICS_TABLE() {
        this(DSL.name("INNODB_METRICS"), null);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_METRICS</code> table reference
     */
    public INNODB_METRICS_TABLE(String alias) {
        this(DSL.name(alias), INNODB_METRICS);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_METRICS</code> table reference
     */
    public INNODB_METRICS_TABLE(Name alias) {
        this(alias, INNODB_METRICS);
    }

    private INNODB_METRICS_TABLE(Name alias, Table<InnodbMetricsRecord> aliased) {
        this(alias, aliased, null);
    }

    private INNODB_METRICS_TABLE(Name alias, Table<InnodbMetricsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> INNODB_METRICS_TABLE(Table<O> child, ForeignKey<O, InnodbMetricsRecord> key) {
        super(child, key, INNODB_METRICS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public INNODB_METRICS_TABLE as(String alias) {
        return new INNODB_METRICS_TABLE(DSL.name(alias), this);
    }

    @Override
    public INNODB_METRICS_TABLE as(Name alias) {
        return new INNODB_METRICS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public INNODB_METRICS_TABLE rename(String name) {
        return new INNODB_METRICS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public INNODB_METRICS_TABLE rename(Name name) {
        return new INNODB_METRICS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, Long, Long, Long, Double, Long, Long, Long, Double, Timestamp, Timestamp, Long, Timestamp, String, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
