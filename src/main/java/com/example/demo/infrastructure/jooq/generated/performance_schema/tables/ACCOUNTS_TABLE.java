/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.performance_schema.tables;


import com.example.demo.infrastructure.jooq.generated.performance_schema.PerformanceSchema;
import com.example.demo.infrastructure.jooq.generated.performance_schema.tables.records.AccountsRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ACCOUNTS_TABLE extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = -1414274033;

    /**
     * The reference instance of <code>performance_schema.accounts</code>
     */
    public static final ACCOUNTS_TABLE ACCOUNTS = new ACCOUNTS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>performance_schema.accounts.USER</code>.
     */
    public final TableField<AccountsRecord, String> USER = createField(DSL.name("USER"), org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>performance_schema.accounts.HOST</code>.
     */
    public final TableField<AccountsRecord, String> HOST = createField(DSL.name("HOST"), org.jooq.impl.SQLDataType.CHAR(60), this, "");

    /**
     * The column <code>performance_schema.accounts.CURRENT_CONNECTIONS</code>.
     */
    public final TableField<AccountsRecord, Long> CURRENT_CONNECTIONS = createField(DSL.name("CURRENT_CONNECTIONS"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>performance_schema.accounts.TOTAL_CONNECTIONS</code>.
     */
    public final TableField<AccountsRecord, Long> TOTAL_CONNECTIONS = createField(DSL.name("TOTAL_CONNECTIONS"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>performance_schema.accounts</code> table reference
     */
    public ACCOUNTS_TABLE() {
        this(DSL.name("accounts"), null);
    }

    /**
     * Create an aliased <code>performance_schema.accounts</code> table reference
     */
    public ACCOUNTS_TABLE(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>performance_schema.accounts</code> table reference
     */
    public ACCOUNTS_TABLE(Name alias) {
        this(alias, ACCOUNTS);
    }

    private ACCOUNTS_TABLE(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ACCOUNTS_TABLE(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ACCOUNTS_TABLE(Table<O> child, ForeignKey<O, AccountsRecord> key) {
        super(child, key, ACCOUNTS);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public ACCOUNTS_TABLE as(String alias) {
        return new ACCOUNTS_TABLE(DSL.name(alias), this);
    }

    @Override
    public ACCOUNTS_TABLE as(Name alias) {
        return new ACCOUNTS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ACCOUNTS_TABLE rename(String name) {
        return new ACCOUNTS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ACCOUNTS_TABLE rename(Name name) {
        return new ACCOUNTS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
