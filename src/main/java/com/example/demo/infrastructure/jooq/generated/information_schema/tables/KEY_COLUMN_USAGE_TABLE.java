/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.information_schema.tables;


import com.example.demo.infrastructure.jooq.generated.information_schema.InformationSchema;
import com.example.demo.infrastructure.jooq.generated.information_schema.tables.records.KeyColumnUsageRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KEY_COLUMN_USAGE_TABLE extends TableImpl<KeyColumnUsageRecord> {

    private static final long serialVersionUID = -1617410747;

    /**
     * The reference instance of <code>information_schema.KEY_COLUMN_USAGE</code>
     */
    public static final KEY_COLUMN_USAGE_TABLE KEY_COLUMN_USAGE = new KEY_COLUMN_USAGE_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeyColumnUsageRecord> getRecordType() {
        return KeyColumnUsageRecord.class;
    }

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.CONSTRAINT_CATALOG</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> CONSTRAINT_CATALOG = createField(DSL.name("CONSTRAINT_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> CONSTRAINT_SCHEMA = createField(DSL.name("CONSTRAINT_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.CONSTRAINT_NAME</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> CONSTRAINT_NAME = createField(DSL.name("CONSTRAINT_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.TABLE_CATALOG</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.TABLE_SCHEMA</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.TABLE_NAME</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.COLUMN_NAME</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.ORDINAL_POSITION</code>.
     */
    public final TableField<KeyColumnUsageRecord, Long> ORDINAL_POSITION = createField(DSL.name("ORDINAL_POSITION"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.POSITION_IN_UNIQUE_CONSTRAINT</code>.
     */
    public final TableField<KeyColumnUsageRecord, Long> POSITION_IN_UNIQUE_CONSTRAINT = createField(DSL.name("POSITION_IN_UNIQUE_CONSTRAINT"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.REFERENCED_TABLE_SCHEMA</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> REFERENCED_TABLE_SCHEMA = createField(DSL.name("REFERENCED_TABLE_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.REFERENCED_TABLE_NAME</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> REFERENCED_TABLE_NAME = createField(DSL.name("REFERENCED_TABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>information_schema.KEY_COLUMN_USAGE.REFERENCED_COLUMN_NAME</code>.
     */
    public final TableField<KeyColumnUsageRecord, String> REFERENCED_COLUMN_NAME = createField(DSL.name("REFERENCED_COLUMN_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>information_schema.KEY_COLUMN_USAGE</code> table reference
     */
    public KEY_COLUMN_USAGE_TABLE() {
        this(DSL.name("KEY_COLUMN_USAGE"), null);
    }

    /**
     * Create an aliased <code>information_schema.KEY_COLUMN_USAGE</code> table reference
     */
    public KEY_COLUMN_USAGE_TABLE(String alias) {
        this(DSL.name(alias), KEY_COLUMN_USAGE);
    }

    /**
     * Create an aliased <code>information_schema.KEY_COLUMN_USAGE</code> table reference
     */
    public KEY_COLUMN_USAGE_TABLE(Name alias) {
        this(alias, KEY_COLUMN_USAGE);
    }

    private KEY_COLUMN_USAGE_TABLE(Name alias, Table<KeyColumnUsageRecord> aliased) {
        this(alias, aliased, null);
    }

    private KEY_COLUMN_USAGE_TABLE(Name alias, Table<KeyColumnUsageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> KEY_COLUMN_USAGE_TABLE(Table<O> child, ForeignKey<O, KeyColumnUsageRecord> key) {
        super(child, key, KEY_COLUMN_USAGE);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public KEY_COLUMN_USAGE_TABLE as(String alias) {
        return new KEY_COLUMN_USAGE_TABLE(DSL.name(alias), this);
    }

    @Override
    public KEY_COLUMN_USAGE_TABLE as(Name alias) {
        return new KEY_COLUMN_USAGE_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KEY_COLUMN_USAGE_TABLE rename(String name) {
        return new KEY_COLUMN_USAGE_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KEY_COLUMN_USAGE_TABLE rename(Name name) {
        return new KEY_COLUMN_USAGE_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, String, String, String, Long, Long, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
