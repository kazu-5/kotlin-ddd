/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.performance_schema.tables;


import com.example.demo.infrastructure.jooq.generated.performance_schema.PerformanceSchema;
import com.example.demo.infrastructure.jooq.generated.performance_schema.enums.ReplicationConnectionConfigurationAutoPosition;
import com.example.demo.infrastructure.jooq.generated.performance_schema.enums.ReplicationConnectionConfigurationSslAllowed;
import com.example.demo.infrastructure.jooq.generated.performance_schema.enums.ReplicationConnectionConfigurationSslVerifyServerCertificate;
import com.example.demo.infrastructure.jooq.generated.performance_schema.tables.records.ReplicationConnectionConfigurationRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class REPLICATION_CONNECTION_CONFIGURATION_TABLE extends TableImpl<ReplicationConnectionConfigurationRecord> {

    private static final long serialVersionUID = -880336411;

    /**
     * The reference instance of <code>performance_schema.replication_connection_configuration</code>
     */
    public static final REPLICATION_CONNECTION_CONFIGURATION_TABLE REPLICATION_CONNECTION_CONFIGURATION = new REPLICATION_CONNECTION_CONFIGURATION_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplicationConnectionConfigurationRecord> getRecordType() {
        return ReplicationConnectionConfigurationRecord.class;
    }

    /**
     * The column <code>performance_schema.replication_connection_configuration.CHANNEL_NAME</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> CHANNEL_NAME = createField(DSL.name("CHANNEL_NAME"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.HOST</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> HOST = createField(DSL.name("HOST"), org.jooq.impl.SQLDataType.CHAR(60).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.PORT</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, Integer> PORT = createField(DSL.name("PORT"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.USER</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> USER = createField(DSL.name("USER"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.NETWORK_INTERFACE</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> NETWORK_INTERFACE = createField(DSL.name("NETWORK_INTERFACE"), org.jooq.impl.SQLDataType.CHAR(60).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.AUTO_POSITION</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationAutoPosition> AUTO_POSITION = createField(DSL.name("AUTO_POSITION"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(com.example.demo.infrastructure.jooq.generated.performance_schema.enums.ReplicationConnectionConfigurationAutoPosition.class), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_ALLOWED</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationSslAllowed> SSL_ALLOWED = createField(DSL.name("SSL_ALLOWED"), org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(com.example.demo.infrastructure.jooq.generated.performance_schema.enums.ReplicationConnectionConfigurationSslAllowed.class), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CA_FILE</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> SSL_CA_FILE = createField(DSL.name("SSL_CA_FILE"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CA_PATH</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> SSL_CA_PATH = createField(DSL.name("SSL_CA_PATH"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CERTIFICATE</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> SSL_CERTIFICATE = createField(DSL.name("SSL_CERTIFICATE"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CIPHER</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> SSL_CIPHER = createField(DSL.name("SSL_CIPHER"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_KEY</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> SSL_KEY = createField(DSL.name("SSL_KEY"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_VERIFY_SERVER_CERTIFICATE</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationSslVerifyServerCertificate> SSL_VERIFY_SERVER_CERTIFICATE = createField(DSL.name("SSL_VERIFY_SERVER_CERTIFICATE"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(com.example.demo.infrastructure.jooq.generated.performance_schema.enums.ReplicationConnectionConfigurationSslVerifyServerCertificate.class), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CRL_FILE</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> SSL_CRL_FILE = createField(DSL.name("SSL_CRL_FILE"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.SSL_CRL_PATH</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> SSL_CRL_PATH = createField(DSL.name("SSL_CRL_PATH"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.CONNECTION_RETRY_INTERVAL</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, Integer> CONNECTION_RETRY_INTERVAL = createField(DSL.name("CONNECTION_RETRY_INTERVAL"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.CONNECTION_RETRY_COUNT</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, ULong> CONNECTION_RETRY_COUNT = createField(DSL.name("CONNECTION_RETRY_COUNT"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.replication_connection_configuration.HEARTBEAT_INTERVAL</code>. Number of seconds after which a heartbeat will be sent .
     */
    public final TableField<ReplicationConnectionConfigurationRecord, Double> HEARTBEAT_INTERVAL = createField(DSL.name("HEARTBEAT_INTERVAL"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "Number of seconds after which a heartbeat will be sent .");

    /**
     * The column <code>performance_schema.replication_connection_configuration.TLS_VERSION</code>.
     */
    public final TableField<ReplicationConnectionConfigurationRecord, String> TLS_VERSION = createField(DSL.name("TLS_VERSION"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>performance_schema.replication_connection_configuration</code> table reference
     */
    public REPLICATION_CONNECTION_CONFIGURATION_TABLE() {
        this(DSL.name("replication_connection_configuration"), null);
    }

    /**
     * Create an aliased <code>performance_schema.replication_connection_configuration</code> table reference
     */
    public REPLICATION_CONNECTION_CONFIGURATION_TABLE(String alias) {
        this(DSL.name(alias), REPLICATION_CONNECTION_CONFIGURATION);
    }

    /**
     * Create an aliased <code>performance_schema.replication_connection_configuration</code> table reference
     */
    public REPLICATION_CONNECTION_CONFIGURATION_TABLE(Name alias) {
        this(alias, REPLICATION_CONNECTION_CONFIGURATION);
    }

    private REPLICATION_CONNECTION_CONFIGURATION_TABLE(Name alias, Table<ReplicationConnectionConfigurationRecord> aliased) {
        this(alias, aliased, null);
    }

    private REPLICATION_CONNECTION_CONFIGURATION_TABLE(Name alias, Table<ReplicationConnectionConfigurationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> REPLICATION_CONNECTION_CONFIGURATION_TABLE(Table<O> child, ForeignKey<O, ReplicationConnectionConfigurationRecord> key) {
        super(child, key, REPLICATION_CONNECTION_CONFIGURATION);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public REPLICATION_CONNECTION_CONFIGURATION_TABLE as(String alias) {
        return new REPLICATION_CONNECTION_CONFIGURATION_TABLE(DSL.name(alias), this);
    }

    @Override
    public REPLICATION_CONNECTION_CONFIGURATION_TABLE as(Name alias) {
        return new REPLICATION_CONNECTION_CONFIGURATION_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public REPLICATION_CONNECTION_CONFIGURATION_TABLE rename(String name) {
        return new REPLICATION_CONNECTION_CONFIGURATION_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public REPLICATION_CONNECTION_CONFIGURATION_TABLE rename(Name name) {
        return new REPLICATION_CONNECTION_CONFIGURATION_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, Integer, String, String, ReplicationConnectionConfigurationAutoPosition, ReplicationConnectionConfigurationSslAllowed, String, String, String, String, String, ReplicationConnectionConfigurationSslVerifyServerCertificate, String, String, Integer, ULong, Double, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
