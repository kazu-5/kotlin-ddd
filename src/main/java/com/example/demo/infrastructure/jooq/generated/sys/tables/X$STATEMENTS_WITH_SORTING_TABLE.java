/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.sys.tables;


import com.example.demo.infrastructure.jooq.generated.sys.Sys;
import com.example.demo.infrastructure.jooq.generated.sys.tables.records.X$statementsWithSortingRecord;

import java.math.BigInteger;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$STATEMENTS_WITH_SORTING_TABLE extends TableImpl<X$statementsWithSortingRecord> {

    private static final long serialVersionUID = -1027062074;

    /**
     * The reference instance of <code>sys.x$statements_with_sorting</code>
     */
    public static final X$STATEMENTS_WITH_SORTING_TABLE X$STATEMENTS_WITH_SORTING = new X$STATEMENTS_WITH_SORTING_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<X$statementsWithSortingRecord> getRecordType() {
        return X$statementsWithSortingRecord.class;
    }

    /**
     * The column <code>sys.x$statements_with_sorting.query</code>.
     */
    public final TableField<X$statementsWithSortingRecord, String> QUERY = createField(DSL.name("query"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.db</code>.
     */
    public final TableField<X$statementsWithSortingRecord, String> DB = createField(DSL.name("db"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.exec_count</code>.
     */
    public final TableField<X$statementsWithSortingRecord, ULong> EXEC_COUNT = createField(DSL.name("exec_count"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.total_latency</code>.
     */
    public final TableField<X$statementsWithSortingRecord, ULong> TOTAL_LATENCY = createField(DSL.name("total_latency"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.sort_merge_passes</code>.
     */
    public final TableField<X$statementsWithSortingRecord, ULong> SORT_MERGE_PASSES = createField(DSL.name("sort_merge_passes"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.avg_sort_merges</code>.
     */
    public final TableField<X$statementsWithSortingRecord, BigInteger> AVG_SORT_MERGES = createField(DSL.name("avg_sort_merges"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.sorts_using_scans</code>.
     */
    public final TableField<X$statementsWithSortingRecord, ULong> SORTS_USING_SCANS = createField(DSL.name("sorts_using_scans"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.sort_using_range</code>.
     */
    public final TableField<X$statementsWithSortingRecord, ULong> SORT_USING_RANGE = createField(DSL.name("sort_using_range"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.rows_sorted</code>.
     */
    public final TableField<X$statementsWithSortingRecord, ULong> ROWS_SORTED = createField(DSL.name("rows_sorted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.avg_rows_sorted</code>.
     */
    public final TableField<X$statementsWithSortingRecord, BigInteger> AVG_ROWS_SORTED = createField(DSL.name("avg_rows_sorted"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.first_seen</code>.
     */
    public final TableField<X$statementsWithSortingRecord, Timestamp> FIRST_SEEN = createField(DSL.name("first_seen"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.last_seen</code>.
     */
    public final TableField<X$statementsWithSortingRecord, Timestamp> LAST_SEEN = createField(DSL.name("last_seen"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sys.x$statements_with_sorting.digest</code>.
     */
    public final TableField<X$statementsWithSortingRecord, String> DIGEST = createField(DSL.name("digest"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * Create a <code>sys.x$statements_with_sorting</code> table reference
     */
    public X$STATEMENTS_WITH_SORTING_TABLE() {
        this(DSL.name("x$statements_with_sorting"), null);
    }

    /**
     * Create an aliased <code>sys.x$statements_with_sorting</code> table reference
     */
    public X$STATEMENTS_WITH_SORTING_TABLE(String alias) {
        this(DSL.name(alias), X$STATEMENTS_WITH_SORTING);
    }

    /**
     * Create an aliased <code>sys.x$statements_with_sorting</code> table reference
     */
    public X$STATEMENTS_WITH_SORTING_TABLE(Name alias) {
        this(alias, X$STATEMENTS_WITH_SORTING);
    }

    private X$STATEMENTS_WITH_SORTING_TABLE(Name alias, Table<X$statementsWithSortingRecord> aliased) {
        this(alias, aliased, null);
    }

    private X$STATEMENTS_WITH_SORTING_TABLE(Name alias, Table<X$statementsWithSortingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> X$STATEMENTS_WITH_SORTING_TABLE(Table<O> child, ForeignKey<O, X$statementsWithSortingRecord> key) {
        super(child, key, X$STATEMENTS_WITH_SORTING);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public X$STATEMENTS_WITH_SORTING_TABLE as(String alias) {
        return new X$STATEMENTS_WITH_SORTING_TABLE(DSL.name(alias), this);
    }

    @Override
    public X$STATEMENTS_WITH_SORTING_TABLE as(Name alias) {
        return new X$STATEMENTS_WITH_SORTING_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$STATEMENTS_WITH_SORTING_TABLE rename(String name) {
        return new X$STATEMENTS_WITH_SORTING_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$STATEMENTS_WITH_SORTING_TABLE rename(Name name) {
        return new X$STATEMENTS_WITH_SORTING_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, ULong, ULong, ULong, BigInteger, ULong, ULong, ULong, BigInteger, Timestamp, Timestamp, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
