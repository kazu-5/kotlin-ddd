/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.jooq.generated.performance_schema.tables;


import com.example.demo.infrastructure.jooq.generated.performance_schema.PerformanceSchema;
import com.example.demo.infrastructure.jooq.generated.performance_schema.tables.records.MetadataLocksRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class METADATA_LOCKS_TABLE extends TableImpl<MetadataLocksRecord> {

    private static final long serialVersionUID = -2100176300;

    /**
     * The reference instance of <code>performance_schema.metadata_locks</code>
     */
    public static final METADATA_LOCKS_TABLE METADATA_LOCKS = new METADATA_LOCKS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetadataLocksRecord> getRecordType() {
        return MetadataLocksRecord.class;
    }

    /**
     * The column <code>performance_schema.metadata_locks.OBJECT_TYPE</code>.
     */
    public final TableField<MetadataLocksRecord, String> OBJECT_TYPE = createField(DSL.name("OBJECT_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.OBJECT_SCHEMA</code>.
     */
    public final TableField<MetadataLocksRecord, String> OBJECT_SCHEMA = createField(DSL.name("OBJECT_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.OBJECT_NAME</code>.
     */
    public final TableField<MetadataLocksRecord, String> OBJECT_NAME = createField(DSL.name("OBJECT_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.OBJECT_INSTANCE_BEGIN</code>.
     */
    public final TableField<MetadataLocksRecord, ULong> OBJECT_INSTANCE_BEGIN = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.LOCK_TYPE</code>.
     */
    public final TableField<MetadataLocksRecord, String> LOCK_TYPE = createField(DSL.name("LOCK_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.LOCK_DURATION</code>.
     */
    public final TableField<MetadataLocksRecord, String> LOCK_DURATION = createField(DSL.name("LOCK_DURATION"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.LOCK_STATUS</code>.
     */
    public final TableField<MetadataLocksRecord, String> LOCK_STATUS = createField(DSL.name("LOCK_STATUS"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.SOURCE</code>.
     */
    public final TableField<MetadataLocksRecord, String> SOURCE = createField(DSL.name("SOURCE"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.metadata_locks.OWNER_THREAD_ID</code>.
     */
    public final TableField<MetadataLocksRecord, ULong> OWNER_THREAD_ID = createField(DSL.name("OWNER_THREAD_ID"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.metadata_locks.OWNER_EVENT_ID</code>.
     */
    public final TableField<MetadataLocksRecord, ULong> OWNER_EVENT_ID = createField(DSL.name("OWNER_EVENT_ID"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * Create a <code>performance_schema.metadata_locks</code> table reference
     */
    public METADATA_LOCKS_TABLE() {
        this(DSL.name("metadata_locks"), null);
    }

    /**
     * Create an aliased <code>performance_schema.metadata_locks</code> table reference
     */
    public METADATA_LOCKS_TABLE(String alias) {
        this(DSL.name(alias), METADATA_LOCKS);
    }

    /**
     * Create an aliased <code>performance_schema.metadata_locks</code> table reference
     */
    public METADATA_LOCKS_TABLE(Name alias) {
        this(alias, METADATA_LOCKS);
    }

    private METADATA_LOCKS_TABLE(Name alias, Table<MetadataLocksRecord> aliased) {
        this(alias, aliased, null);
    }

    private METADATA_LOCKS_TABLE(Name alias, Table<MetadataLocksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> METADATA_LOCKS_TABLE(Table<O> child, ForeignKey<O, MetadataLocksRecord> key) {
        super(child, key, METADATA_LOCKS);
    }

    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public METADATA_LOCKS_TABLE as(String alias) {
        return new METADATA_LOCKS_TABLE(DSL.name(alias), this);
    }

    @Override
    public METADATA_LOCKS_TABLE as(Name alias) {
        return new METADATA_LOCKS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public METADATA_LOCKS_TABLE rename(String name) {
        return new METADATA_LOCKS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public METADATA_LOCKS_TABLE rename(Name name) {
        return new METADATA_LOCKS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, ULong, String, String, String, String, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
